#requires -version 3

<#
.SYNOPSIS
	Example script using Citrix CVAD REST API

.DESCRIPTION
    Use the API documented at https://developer.cloud.com/citrixworkspace/virtual-apps-and-desktops/cvad-rest-apis for accessing Citrix Cloud CVAD

.PARAMETER customerId
    Citrix Cloud customer id to query. customer id is shown in the Cloud management portal in the "API Access" tab of "Identity and Access Management" menu.
    Can also be passed, without parameter, via the %CustomerId% environment variable

.PARAMETER clientId
    Client id generated by creating a Secure Client on the "API Access" tab of "Identity and Access Management" menu

.PARAMETER secret
    Secret generated by creating a Secure Client on the "API Access" tab of "Identity and Access Management" menu

.PARAMETER secureclientcsv
    csv file downloaded from Citrix Cloud portal containing client id and secret

.PARAMETER deliveryGroup
    Delivery group name/regex to fetch details of and optionally modify

.PARAMETER updatedDeliveryGroupDescription

.PARAMETER iterations
    Numer of times to run the script

.PARAMETER millisecondsPause
    Pause in milliseconds between each invocation of the script

.EXAMPLE
    & '.\CVAD REST.ps1' -customerId yourcloudcustomerid -clientId 'f111319a-beef-4ebc-b9e4-fafe6196c88b' -secret 'QZXVERYSECRETQYXZ==' -Verbose

    Connect to the Citrix Cloud REST API with customer id "yourcloudcustomerid" and the clientid and secret previously created from a Secure Client instance in the Cloud console
    and show the number of delivery groups and machine catalogs
    
.EXAMPLE
    & '.\CVAD REST.ps1' -secureclientcsv C:\@guyrleech\secureclient.converge2021.csv -customerId %customerid% -deliveryGroup Leech -updatedDeliveryGroupDescription "Updated for Converge demo @ $(Get-Date -Format G)" -enableDeliveryGroup $true

    Authenticate to the Citrix Cloud for the customer name stored in the %customerid% environment variable with the client id & secret in the specified csv file then find the delivery group whose name matches "Leech" and update its description and enable it.

.NOTES
    This is a demonstration script only. If I were to write a production script for CVAD API, I would not allow passing of the client secret in clear text on the command line since it will persist in the PowerShell history file contained in the user's Windows profile annd be visible to task manager and process creation auditing events

    Modification History:
        @guyrleech   03/11/2020  Initial release
        @guyrleech   26/10/2021  Change specified delivery group attributes. Allow credential passing via csv
#>

[CmdletBinding()]

Param
(
    [Parameter(Mandatory=$true,HelpMessage='Citrix Cloud customer id')]
    [string]$customerId ,
    [Parameter(Mandatory=$true,ParameterSetName='Explicit',HelpMessage='API Client Id')]
    [string]$clientId ,
    [Parameter(Mandatory=$true,ParameterSetName='Explicit',HelpMessage='API Client Secret')]
    [string]$secret ,
    [Parameter(Mandatory=$true,ParameterSetName='CSV',HelpMessage='Secure client csv file containing API Client Secret')]
    [string]$secureclientcsv ,
    [string]$deliveryGroup ,
    [string]$updatedDeliveryGroupDescription ,
    [bool]$enableDeliveryGroup ,
    [int]$iterations = 1 ,
    [int]$millisecondsPause = 15000 ,
    ## these should not need to be changed
    [string]$authURL = 'https://trust.citrixworkspacesapi.net' ,
    [string]$baseURL = 'https://api-us.cloud.com/cvad/manage' ## 'https://api-us.cloud.com/cvadapis'
)

#region Functions

<#
.SYNOPSIS
Wrapper for Invoke-RestMethod to time request and trap and report errors

.PARAMETER RESTparams
Hashtable of parameters to pass to the REST API

.PARAMETER itemDetails
Text description for messages

.PARAMETER body
Optional body to pass to REST API

.PARAMETER success
Set to true if no errors otherwise false

.PARAMETER noRetry
Do not retyry on error

#>
Function
Invoke-CVADRestMethod
{
    [CmdletBinding()]

    Param
    (
        [Parameter(Mandatory=$true)]
        [hashtable]$RESTparams ,
        [Parameter(Mandatory=$true)]
        [string]$itemDetails ,
        [hashtable]$body ,
        [ref]$success ,
        [switch]$noRetry
    )

    if( $PSBoundParameters[ 'success '] )
    {
        $success.Value = $false
    }
    $result = $null
    [datetime]$startRequest = [datetime]::Now
    [datetime]$endRequest = [datetime]::MaxValue
    # hashtable parameters are passed by reference so we must not pollute it
    [hashtable]$bodyParams = @{}

    if( $body -and $body.Count )
    {
        $bodyParams.Add( 'body' , ($body | ConvertTo-Json ))
    }

    try
    {
        $result = Invoke-RestMethod @RESTparams @bodyParams
        $endRequest = [datetime]::Now
        if( $PSBoundParameters[ 'success'] )
        {
            $success.Value = $true
        }
    }
    catch
    {
        $endRequest = [datetime]::Now
        Write-Error "Failed to $($RESTparams.Method) $itemDetails via $($RESTparams.uri) ($(($endRequest - $startRequest).TotalMilliseconds) ms) : $_"
        if( $responseHeaders = (Get-Variable -Name $RESTparams.ResponseHeadersVariable -ErrorAction SilentlyContinue | Select-Object -ExpandProperty Value))
        {
            ( $responseHeaders.GetEnumerator() | Select-Object -Property Key,@{n='Value';e={$_.Value}} | Out-String ) | Write-Error
        }
        ## retry if server side error and not been told not to retry
        if( -Not $noRetry -and ($_.ToString()|ConvertFrom-Json -ErrorAction SilentlyContinue | Select-Object -ExpandProperty statuscode -ErrorAction SilentlyContinue) -ge 500 )
        {
            Write-Verbose -Message "Retrying $($RESTparams.Method) to $($RESTparams.URI) ..."
            if( ( $result = Invoke-RestMethod @RESTparams ) -and $PSBoundParameters[ 'success'] )
            {
                $success.Value = $true
            }
        }
    }

    $result ## return
}

#endregion Functions

#region Main

## Sanity check parameters
if( -Not $PSBoundParameters[ 'deliveryGroup' ] -and ( $PSBoundParameters[ 'updatedDeliveryGroupDescription' ] -or $PSBoundParameters[ 'enableDeliveryGroup' ] ) )
{
    Throw "Must specify -deliveryGroup when updating description or enabling/disabling"
}

#region SSL Stuff
##https://stackoverflow.com/questions/41897114/unexpected-error-occurred-running-a-simple-unauthorized-rest-query?rq=1
Add-Type -Verbose:$false -TypeDefinition @'
public class SSLHandler
{
    public static System.Net.Security.RemoteCertificateValidationCallback GetSSLHandler()
    {
        return new System.Net.Security.RemoteCertificateValidationCallback((sender, certificate, chain, policyErrors) => { return true; });
    }
}
'@

[System.Net.ServicePointManager]::ServerCertificateValidationCallback = [SSLHandler]::GetSSLHandler()
[Net.ServicePointManager]::SecurityProtocol = [Net.ServicePointManager]::SecurityProtocol -bor [System.Net.SecurityProtocolType]::Tls12
    
#endregion SSL Stuff

$sessionVariable = $null

[hashtable]$RESTparams = @{ 
    'ContentType' = 'application/json'
    'Method' = 'POST'
    'Verbose' = $false
    'ErrorAction' = 'Continue'
}

if( $PSBoundParameters[ 'secureclientcsv' ])
{
    if( -Not ( $secureclient = Import-Csv -Path $secureclientcsv ) )
    {
        Throw "Failed to import from secure client csv `"$secureclientcsv`""
    }

    if( $secureclient -is [array])
    {
        Throw "Found $($secureclient.Count) identities in `"$secureclientcsv`" - there can be only one"
    }

    if( -Not $secureclient.PSObject.Properties[ 'ID'] -or [string]::IsNullOrEmpty( $secureclient.ID ))
    {
        Throw "ID field missing from `"$secureclientcsv`""
    }

    if( -Not $secureclient.PSObject.Properties[ 'Secret'] -or [string]::IsNullOrEmpty( $secureclient.Secret ))
    {
        Throw "Secret field missing from `"$secureclientcsv`""
    }

    $clientId = $secureclient.ID
    $secret = $secureclient.secret

    Write-Verbose -Message "Using `"$($secureclient.Name)`" identity from `"$secureclientcsv`""
}

## https://developer.cloud.com/getting-started/docs/overview
[hashtable]$authParams = @{ 
        ClientId = $clientId
        ClientSecret = $secret
}

## allow customerid to be stored in environment variable so it's not visible whilst demoing
if( $customerId.IndexOf( '%') -ne $customerId.LastIndexOf( '%' ) )
{
    $customerId = [System.Environment]::ExpandEnvironmentVariables( $customerId )
}

$RESTparams.Body = ( $authParams | ConvertTo-Json ).ToString()
$RESTparams.Uri = "$authURL/$customerId/tokens/clients"

$responseHeaders = $null

if( $PSVersionTable.PSVersion.Major -ge 7 )
{
    $RESTparams.Add( 'ResponseHeadersVariable' , 'responseHeaders' )
}

try
{
    $authenticated = Invoke-RestMethod @RESTparams -SessionVariable sessionVariable
}
catch
{
    $authenticated = $null
    Throw "Failed to logon to $($RESTparams.uri) as customer $customerId : $_"
}

if( ! $authenticated -or ! $authenticated.PSObject.Properties[ 'token' ] )
{
    Throw "Failed to get authentication token from $($RESTparams.uri) as customer $customerId, got $authenticated"
}

Write-Verbose -Message "Authenticated ok, session expires at $(Get-Date -Date ((Get-Date).AddSeconds( $authenticated.expiresIn )) -Format G)"

$RESTparams.websession = $sessionVariable
$RESTparams.Remove( 'Body' ) ## no longer require the authentication fields (unless we need to reauthenticate)

For( [int]$iteration = 1 ; $iteration -le $iterations ; $iteration++ )
{
    Write-Verbose -message "$iteration / $iterations : $(Get-Date -Format G)"

    ## https://developer.cloud.com/citrixworkspace/virtual-apps-and-desktops/cvad-rest-apis/docs/how-to-get-site-id
    $RESTparams.Uri = "$baseURL/me"
    $RESTparams.Method = 'GET'
    $RESTparams.Headers = @{ 
        'Authorization' = "CwsAuth Bearer $($authenticated.token)"
        'Accept' = 'application/json'
        'Content-Type' = 'application/json'
        'Citrix-CustomerId' = $customerId
        'charset' = 'utf-8' }

    if( $sites = Invoke-CVADRestMethod -RESTparams $RESTparams -itemDetails 'sites' )
    {
        Write-Verbose -Message "Got $($sites.Customers.Count) sites for `"$($sites.DisplayName)`""

        ForEach( $site in $sites.Customers.Sites )
        {
            ## https://developer.cloud.com/citrixworkspace/virtual-apps-and-desktops/cvad-rest-apis/docs/how-to-get-machine-catalogs
            Write-Verbose -Message "Querying machine catalogs for site $($site.Id)"
            
            $RESTparams.Headers[ 'Citrix-InstanceId' ] = $site.Id
            $RESTparams.Uri = "$baseURL/MachineCatalogs"

            if( ( $machineCatalogs = Invoke-CVADRestMethod -RESTparams $RESTparams -itemDetails 'machine catalogs' ) -and $machineCatalogs.PSObject.Properties[ 'items' ] -and $machineCatalogs.Items.Count )
            {
                Write-Verbose -Message "Got $($machineCatalogs.Items.Count) machine catalogs"
            }

            ## https://developer.cloud.com/citrixworkspace/virtual-apps-and-desktops/cvad-rest-apis/docs/how-to-get-delivery-groups
            Write-Verbose -Message "Querying delivery groups for site $($site.Id)"

            $RESTparams.Uri = "$baseURL/DeliveryGroups"

            if( ( $deliveryGroups = Invoke-CVADRestMethod -RESTparams $RESTparams -itemDetails 'delivery groups' ) -and $deliveryGroups.PSObject.Properties[ 'items' ] -and $deliveryGroups.Items.Count )
            {
                Write-Verbose -Message "Got $($deliveryGroups.Items.Count) delivery groups"

                if( $PSBoundParameters[ 'deliveryGroup' ] )
                {
                    if( $selectedDeliveryGroup = $deliveryGroups.Items.Where( { $_.Name -match $deliveryGroup } ) )
                    {
                        if( $selectedDeliveryGroup -is [array] )
                        {
                            Write-Verbose -Message "Got $($deliveryGroups.Count) matching `"$deliveryGroup`" - $(($selectedDeliveryGroup | Select-Object -ExpandProperty Name) -join ',')"
                        }
                        else
                        {
                            Write-Verbose -Message "Got delivery group `"$($selectedDeliveryGroup.Name) matching `"$deliveryGroup`""
                            
                            $selectedDeliveryGroup ## output delivery group object to the pipeline

                            [hashtable]$body = @{}

                            if( $PSBoundParameters[ 'updatedDeliveryGroupDescription' ] )
                            {
                                $body.Add( 'Description' , $updatedDeliveryGroupDescription )
                            }
                            if( $PSBoundParameters.ContainsKey( 'enableDeliveryGroup' ))
                            {
                                $body.Add( 'Enabled' , $enableDeliveryGroup )
                            }

                            if( $body.Count -gt 0 )
                            {
                                ## https://developer.cloud.com/citrixworkspace/virtual-apps-and-desktops/cvad-rest-apis/docs/how-to-update-a-delivery-group
                                $RESTparams.Uri = "$($RESTparams.URI)/$($selectedDeliveryGroup.Id)"
                                $RESTparams.Method = 'PATCH'
                                [bool]$success = $false 

                                Invoke-CVADRestMethod -RESTparams $RestParams -Body $body -itemDetails " delivery group `"$($selectedDeliveryGroup.Name)`"" ([ref]$success)
                                if( $success )
                                {
                                        Write-Verbose -Message "Updated delivery group `"$($selectedDeliveryGroup.Name)`" ok"
                                }
                            }
                        }
                    }
                    else
                    {
                        Write-Warning -Message "None of the $($deliveryGroups.Items.Count) delivery groups matched `"$deliveryGroup`""
                    }
                }
            }
        }
    }
    if( $iteration -ne $iterations)
    {
        Start-Sleep -Milliseconds $millisecondsPause ## don't swamp the poor Cloud instance if we are repeating :-)
    }
}

Write-Verbose -message "$iterations finished : $(Get-Date -Format G) "

#endregion main
